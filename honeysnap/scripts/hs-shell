#!/usr/bin/env python

################################################################################
# (c) 2007, The Honeynet Project
#   Author: Arthur Clune, arthur@honeynet.org.uk
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
################################################################################    

# $Id$

"""
Bring up a ipython shell with our model already loaded.  
Optionally run matplotlib + basemap for graphs
"""            

import optparse
import sys 

from IPython import ipapi
from sqlalchemy import *
from honeysnap.model import model

op = optparse.OptionParser()
op.add_option('--dburi', dest='dburi', help='dburi to connect to') 
op.add_option('--debug', dest='debug', action="store_const", const=True, help='Show generated SQL?') 
op.add_option('--pylab', dest='pylab', action="store_const", const=True, help="Run ipython with -pylab for matplotlib")
opts, args = op.parse_args()
if not opts.dburi:
    op.error('Must give a dburi with --dburi=')
    sys.exit(1)  
if opts.debug:
   debug=True
else:
   debug=False
if opts.pylab:
   sys.argv = [ sys.argv[0], '-pylab' ] 
else:
   sys.argv = [ sys.argv[0] ] 

try:
    engine = model.connect_to_db(opts.dburi, opts.debug)                
except Exception, e:
    print "Error connecting to database: ", e
    sys.exit(1)
sqa_session=create_session() 

namesp = dict(engine=engine, session=sqa_session)
session = ipapi.make_session(namesp)
ip = ipapi.get()
ip.ex("from sqlalchemy import *")
ip.ex("from sqlalchemy.ext.selectresults import SelectResults")
ip.ex("from honeysnap.model.model import *")
ip.ex("from honeysnap.importers.sebekDecode import SBK_READ, SBK_WRITE, SBK_OPEN, SBK_SOCK")   
ip.ex("""
try:
    from matplotlib.toolkits.basemap import Basemap
except:
    pass
""")

ip.options.banner = "\nWelcome to the Honeysnap Shell\n"
session.mainloop()
b = raw_input("Do you wish to commit your database changes? [yes] ")
if not b.startswith("n"):
    sqa_session.flush()   


