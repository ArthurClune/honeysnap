   
# $Id$

USAGE
=====

Set up a database in anything supported by SQLAlchemy. Honeysnap has been tested with MySQL and Postgresql.

For each pcap file you want to import, run

$ honeysnap_db -H <honeypot ips> --dburi=<dburi> <pcap_file>

Optionally, specify --debug to see the raw sql generated.

The dburi is in the form 'type://user:password@host/dbname' e.g.

postgres:///hs
postgres://user:password@localhost/hs
mysql://foo:bar@localhost/hs


Viewing Data
============

$ hs-shell --dburi=<dburi>

will give you an ipython shell (if ipython is installed), setup with the model imported into the local scope

$ hs-shell --dburi='sqlite:///fred.db'

Welcome to the Honeysnap Shell

In [1]: fq = session.query(Flow).count()

In the shell you have access to all the model classes (Honeypot, Ip, Flow, IRCTalker, IRCMessage, Sebek)
plus the sqlalchemy objects 'session', 'engine' and 'metadata'
   
Any changes you make to the database will be (optionally) committed when you leave ipython


In [3]: Do you wish to commit your database changes? [yes] 

Do you really want to exit ([y]/n)?

Graphing Data using Matplotlib
==============================

If you install matplotlib (best done via your OS's package management system as there's a lot
of dependencies), you can plot graphs of your queries in hs-shell.

$ hs-shell --dburi='sqlite:///fred.db' --pylab

See

http://matplotlib.sourceforge.net/tutorial.html

for examples of how to plot data in matplotlib and

http://matplotlib.sourceforge.net/matplotlib.toolkits.basemap.basemap.html

for map plotting (the randompoints.py example from the basemap example 
set is also useful)
         
To plot trends, there are some helper classes:

s1 = rand(31)
s2 = rand(31)
st = datetime(2007,01,01)
ft = datetime(2007,02,01)
d = DateSeries(st, ft)
d.plot_dates(s1)
d.plot_dates(s2, color='red')

To plot on the map, there's also some helpers. Want to
see which IPs are talking to all our Honeypots?

> sub_q = select(
     [func.count(flow_table.c.honeypot_id).label('nodes'), ip_table.c.id,
                 ip_table.c.ip_addr, ip_table.c.longitude,
                 ip_table.c.latitude
     ],
     flow_table.c.src_id==ip_table.c.id,
     distinct=True, use_labels=True,
     group_by=([flow_table.c.honeypot_id, ip_table.c.id,
               ip_table.c.ip_addr, ip_table.c.longitude,
               ip_table.c.latitude
              ])
     ).alias('sub_q')

> q = select( [sub_q.c.nodes, sub_q.c.ip_ip_addr, sub_q.c.ip_longitude, sub_q.c.ip_latitude],
              from_obj=[sub_q],
              order_by=[desc(sub_q.c.nodes)],
              group_by=[sub_q.c.nodes, sub_q.c.ip_ip_addr, sub_q.c.ip_longitude, sub_q.c.ip_latitude])

> q.append_having(sub_q.c.nodes>5)

> l = list(q.execute())
> m = Wordmap()
> m.plot_ips(l)

in hs-shell gives you all those ips, nicely plotted on a worldmap. Want to compare with anyother set of ips?

m.plot(l2, color='red')
          
For now, you need to write SQLAlchemy queries to get data to plot. 
This will be abstracted more in the future :) 

Using Raw SQL
=============

Some sample SQL queries from David Watson:

Count all packets:

select count(packets) from flow;

Count all bytes:

select count(bytes) from flow;

Count packets per honeynet:

select distinct honeypot_id as node, sum(packets) from flow group by node;

Count bytes per honeynet:

select distinct honeypot_id as node, sum(bytes) from flow group by node;

Count flows per honeynet:

select distinct honeypot_id as node, count(*) from flow group by node;

Largest flows by bytes, excluding sebek:

select * from flow where sport != 1101 order by bytes desc limit 100;

Largest flows by packets, excluding sebek:

select * from flow where sport != 1101 order by packets desc limit 100;

Unique SRC IP addresses:

SELECT count(distinct src_id) from flow;

Unique SRC IP addresses per honeynet:

select distinct honeypot_id as node, count(distinct src_id) from flow group by node;

Unique DST IP addresses:

SELECT count(distinct dst_id) from flow;

Unique DST IP addresses per honeynet:

select distinct honeypot_id as node, count(distinct dst_id) from flow group by node;

Unqiue SRC and DST IP addresses per honeynet:

select distinct honeypot_id as node, count(distinct src_id), count(distinct dst_id) 
from flow group by node;

Unique IP protocols:

SELECT distinct ip_proto from flow;

Volume of IP protocols (per flow, could be bytes/packets):

select distinct ip_proto as protocols, count(*) as flows, sum(packets), sum(bytes) 
from flow group by protocols order by flows desc;

Count of Unique IP protocols per honeynet:

select distinct honeypot_id as node, count(distinct ip_proto) from flow group by node;


Top IPs for packets/bytes/flows:

select distinct src_id as attacker, count(*) as flows, sum(packets), sum(bytes) 
from flow group by attacker order by flows desc;

select distinct flow.src_id as attacker, count(flow.packets) as flows, 
sum(flow.packets) as packets, sum(flow.bytes) as bytes,
ip.ip_addr, ip.country, ip.domain, ip.isp, ip.city from flow, ip 
where flow.src_id = ip.id group by attacker order by packets desc;

select distinct flow.src_id as attacker, count(flow.packets) as flows, 
sum(flow.packets) as packets, sum(flow.bytes) as bytes,
ip.ip_addr, ip.country, ip.domain, ip.isp, ip.city from flow, ip 
where flow.src_id = ip.id group by attacker order by bytes desc;

select distinct flow.src_id as attacker, count(flow.packets) as 
flows, sum(flow.packets) as packets, sum(flow.bytes) as bytes,
ip.ip_addr, ip.country, ip.domain, ip.isp, ip.city from flow, ip 
where flow.src_id = ip.id group by attacker order by flows desc;

Top countries by packet/bytes/flows:

select distinct ip.country as country, count(flow.packets) as 
flows, sum(flow.packets) as packets, sum(flow.bytes) as bytes
from flow, ip where flow.src_id = ip.id group by country order by packets desc;

select distinct ip.country as country, count(flow.packets) as 
flows, sum(flow.packets) as packets, sum(flow.bytes) as bytes
from flow, ip where flow.src_id = ip.id group by country order by bytes desc;

select distinct ip.country as country, count(flow.packets) as 
flows, sum(flow.packets) as packets, sum(flow.bytes) as bytes
from flow, ip where flow.src_id = ip.id group by country order by flows desc;

Unique IP addresses seen by many honeynets (N=5 in this example):

select count(distinct flow.honeypot_id) as nodes, ip.ip_addr, 
ip.country, ip.domain, ip.isp, ip.city from flow, ip where flow.src_id = ip.id group by
 flow.src_id having nodes > 5 order by nodes desc;

PER PORT (using 22/SSH as example)
----------------------------------

SSH flows:

SELECT count(*) FROM flow where dport = '22';
SSH flows per honeypot:

select distinct honeypot_id as node, count(dport) from flow where 
dport = '22' group by node;

SSH packets per honeypot:

select distinct honeypot_id as node, sum(packets) from flow where dport = '22' 
group by node;

SSH bytes per honeypot:

select distinct honeypot_id as node, sum(bytes) from flow where 
dport = '22' group by node;

SSH combined:

select distinct honeypot_id as node, count(dport), sum(packets), sum(bytes) from 
flow where dport = '22' group by node;

SSH unique source IP addresses:

select count(distinct src_id) from flow where dport = '22';

Top SSH attackers by packet/bytes/flows

select distinct src_id as attacker, count(*) as flows, sum(packets), sum(bytes) from 
flow where dport = '22' group by attacker order by flows desc;

select distinct flow.src_id as attacker, count(flow.packets) as flows, sum(flow.packets) 
as packets, sum(flow.bytes) as bytes, ip.ip_addr, ip.country, ip.domain, 
ip.isp, ip.city from flow, ip where flow.src_id = ip.id and dport = '22' 
group by attacker order by packets desc;

select distinct flow.src_id as attacker, count(flow.packets) as flows, sum(flow.packets) as 
packets, sum(flow.bytes) as bytes, ip.ip_addr, ip.country, ip.domain, ip.isp, ip.city from 
flow, ip where flow.src_id = ip.id and dport = '22' group by attacker order by bytes desc;

select distinct flow.src_id as attacker, count(flow.packets) as flows, sum(flow.packets) as 
packets, sum(flow.bytes) as bytes, ip.ip_addr, ip.country, ip.domain, ip.isp, ip.city from 
flow, ip where flow.src_id = ip.id and dport = '22' group by attacker order by flows desc;

PER DAY
=======

Per day
DISTINCT DATE_FORMAT(starttime, '%Y-%m-%d')

Packets/bytes/flows per day:

SELECT DISTINCT DATE_FORMAT(starttime,'%Y-%m-%d') as 
date, count(bytes) from flow group by date;

SELECT DISTINCT DATE_FORMAT(starttime, '%Y-%m-%d') as 
date, count(distinct ip_proto) as protocols, count(*) as flows, sum(packets), sum(bytes)
from flow group by date order by protocols;

SSH traffic per day:

SELECT DISTINCT DATE_FORMAT(starttime,'%Y-%m-%d') as 
date, count(*) as flows, sum(packets), sum(bytes) from flow where dport = ‘22′ group by date;
Unique Source IP addresses per day:

SELECT DISTINCT DATE_FORMAT(starttime,'%Y-%m-%d') as 
date, count(distinct src_id) from flow group by date;